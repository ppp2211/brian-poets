<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
  <GraphType id="snn_always_spike">

    <Properties>
    </Properties>

    <SharedCode><![CDATA[
    //reinventing some wheels...

    float exp(float exponent)
    {   //4th order taylor series approximation
    float exp2 = exponent*exponent;
    float exp3 = exp2*exponent;
    float exp4 = exp3*exponent;
    return (1.0 + exponent + (exp2/2.0) + (exp3/6.0) + (exp4/24.0)); 
    }
    
    float fabs(float input)
    {   
    float f = input;
    int *v = (int *)(&f);
    *v = *v & 0x7FFFFFFF;
    
    return f;
    }

    ]]></SharedCode>

    <MessageTypes>
      <MessageType id="__init__">
        <!-- This doesn't have any properties -->
      </MessageType>
      
      <MessageType id="spike">
        <Message>
          <Scalar type="int8_t" name="fired" />
	  <Scalar type="float" name="timestamp" />
	</Message>
      </MessageType>

      <MessageType id="log">
        <Message>
          <Scalar type="int32_t" name="index" />
	  <Scalar type="float" name="timestamp" />
	</Message>
      </MessageType>

      <MessageType id="tick">
      </MessageType>
    </MessageTypes>

    <DeviceTypes>
      <DeviceType id="neuron">

          <Documentation><![CDATA[
	  Globally clocked using a dedicated clock node, all neurons fire at every tick - direct re-implementation of the clocked_izhikevich example.
	  
	  Neuron flow:
	  init:
	    set v to initial volts
	    waitTick = 0
	    sentSpike = 1 (don't fire during init)

	  incoming tick:
	    waitTick = 0  

	  incoming spike:
	    v += edge weight
	  
	  fire (if not waitTick):
            if v > threshold:
	      send fired = 1
	      reset v
	      sentSpike = 1
	      log = 1
	    else:
              send fired = 0
	      sentSpike = 1

          tock (if !waitTick AND sentSpike):
	    v = v_expr (re-evaluate expression)
	    waitTick = 1
	    sentSpike = 0
          
	]]></Documentation>

        <Properties>
	  <Scalar name="I" type="float" />
	  <Scalar name="tau" type="float" />
	  <Scalar name="thr" type="float" />
	  <Scalar name="rst" type="float" />
	  <Scalar name="dt" type="float" />
          <Scalar name="v_init" type="float" />
	  <Scalar name="index" type="uint32_t" />
	</Properties>
	
        <State>
          <Scalar type="float" name="v" />
          <Scalar type="float" name="t" />
          <Scalar name="waitTick" type="int8_t" />
          <Scalar name="sentSpike" type="int8_t" />
	  <Scalar name="readyToLog" type="int8_t" />
        </State>


        <InputPin name="__init__" messageTypeId="__init__">
          <OnReceive><![CDATA[
          deviceState->v=deviceProperties->v_init;
	  deviceState->t=0.0;
          deviceState->waitTick=false;
          deviceState->sentSpike=true; //don't fire in round 1

          handler_log(3, "INIT v=%f v_init=%f, deviceState->v, deviceProperties->v_init);

          ]]>
          </OnReceive>
        </InputPin>

        <ReadyToSend><![CDATA[
        *readyToSend=0;
	if(!deviceState->waitTick && deviceState->sentSpike && deviceState->readyToLog){
            *readyToSend |= OUTPUT_FLAG_log;
	}else if(!deviceState->waitTick && deviceState->sentSpike){
	    *readyToSend |= OUTPUT_FLAG_tock;
        }else if(!deviceState->waitTick){
            *readyToSend |= OUTPUT_FLAG_fire;
        }
        ]]></ReadyToSend>

        <OutputPin name="tock" messageTypeId="tick">
          <OnSend><![CDATA[
          assert(!deviceState->waitTick);
	  if (deviceState->t >= deviceProperties->endTime){
	      handler_exit(0);
	  }
	      
          float &v=deviceState->v;

	  //##INSERT_EQUATIONS_HERE##
	  
	  handler_log(3, "Tock: t=%f, v=%f", deviceState->t, deviceState->v);
	  deviceState->t += deviceProperties->dt;
          deviceState->sentSpike=false;
          deviceState->waitTick=true;

          ]]></OnSend>
        </OutputPin>

        <InputPin name="tick" messageTypeId="tick">
          <OnReceive><![CDATA[
          assert(deviceState->waitTick);
          assert(!deviceState->sentSpike);
          deviceState->waitTick=false;
	  ]]></OnReceive>
        </InputPin>

        <OutputPin name="fire" messageTypeId="spike">
          <OnSend><![CDATA[
          message->timestamp = deviceState->t;
          if(deviceState->v >= deviceProperties->thr){ 
              message->fired = true;
	      deviceState->readyToLog = true;
              deviceState->v=deviceProperties->rst;
              handler_log(1, "FIRE! t=%f", deviceState->t);
          } else {
              message->fired = false;
	      handler_log(3, "No fire, t=%f, v=%f", deviceState->t, deviceState->v);
          }

          assert(!deviceState->waitTick);
          assert(!deviceState->sentSpike);
          deviceState->sentSpike=true;
          ]]></OnSend>
        </OutputPin>

        <OutputPin name="log" messageTypeId="log" application="true">
          <OnSend><![CDATA[
	  message->index = deviceProperties->index;
          message->timestamp = deviceState->t;
          deviceState->readyToLog=false;
          ]]></OnSend>
        </OutputPin>

        <InputPin name="input" messageTypeId="spike">
            <Properties>
                <Scalar type="float" name="weight" />
            </Properties>

          <OnReceive><![CDATA[
          if(message->fired){
              deviceState->v += edgeProperties->weight;
              handler_log(3, "Spike recv, t_recv=%f, t_sent=%f, v=%f", deviceState->t, message->timestamp, deviceState->v);
	      }
          ]]></OnReceive>
        </InputPin>

      </DeviceType>

      <DeviceType id="clock">
        <Properties>
          <Scalar type="uint32_t" name="neuronCount" />
        </Properties>

        <State>
          <Scalar type="uint32_t" name="waitCount" />
        </State>

        <InputPin name="__init__" messageTypeId="__init__">
          <OnReceive><![CDATA[
          deviceState->waitCount = deviceProperties->neuronCount;
          handler_log(4,"waitCount=%d, neuronCount=%d", deviceState->waitCount, deviceProperties->neuronCount);
          ]]></OnReceive>
        </InputPin>

        <ReadyToSend><![CDATA[
        *readyToSend = deviceState->waitCount==0 ? OUTPUT_FLAG_tick : 0;
        ]]></ReadyToSend>

        <InputPin name="tock" messageTypeId="tick">
          <OnReceive><![CDATA[
          assert(deviceState->waitCount > 0);
          deviceState->waitCount--;
          handler_log(4,"tock : waitCount = %d\n", deviceState->waitCount);
          ]]></OnReceive>
        </InputPin>

        <OutputPin name="tick" messageTypeId="tick">
          <OnSend><![CDATA[
          handler_log(4,"tick : waitCount = %d\n", deviceState->waitCount);
          assert(deviceState->waitCount==0);
          deviceState->waitCount=deviceProperties->neuronCount;
          ]]></OnSend>
        </OutputPin>

      </DeviceType>
    </DeviceTypes>
  </GraphType>
</Graphs>
