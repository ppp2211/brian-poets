<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
  <GraphType id="snn_noclock_always_spike">

    <Properties>
    </Properties>

    <SharedCode><![CDATA[
        //reinventing some wheels...

        float exp(float exponent)
        {   //4th order taylor series approximation
          float exp2 = exponent*exponent;
            float exp3 = exp2*exponent;
            float exp4 = exp3*exponent;
            return (1.0 + exponent + (exp2/2.0) + (exp3/6.0) + (exp4/24.0)); 
        }

        float fabs(float input)
        {   
            float f = input;
            int *v = (int *)(&f);
            *v = *v & 0x7FFFFFFF;
            
            return f;
        }

        ]]></SharedCode>

    <MessageTypes>
      <MessageType id="__init__">
        <!-- This doesn't have any properties -->
      </MessageType>

      <MessageType id="spike">
        <Message>
           <Scalar type="int8_t" name="fired" />
           <Scalar type="float" name="timestamp" />
       </Message>
    </MessageType>

    </MessageTypes>

    <DeviceTypes>
      <DeviceType id="neuron">

          <Documentation><![CDATA[
 	const double _lio_1 = - dt;
       const double _v = (I + (v * exp(_lio_1 / tau))) - (I * exp(_lio_1 / tau));
       // Replace I and Tau per neuron (2, 0 / 10, 100):
	// I and tau are in static arrays = how to extract??

       const std::clock_t _start_time = std::clock();
       const double _run_time = (double)(std::clock() - _start_time)/CLOCKS_PER_SEC;

       Neuron flow:
       init():
         V = reset
         fired = 0
         t = 0
       fire():
           send spike
           if V > thr:
               payload = 1
           V = reset
           fired = 1
       spike():
         if incoming message:
           V += weight       
         
        ]]></Documentation>

        <Properties>
		<Scalar name="I" type="float" />
		<Scalar name="tau" type="float" />
		<Scalar name="thr" type="float" />
		<Scalar name="rst" type="float" />
		<Scalar name="dt" type="float" />
                <Scalar name="v_init" type="float" />
                <Scalar name="endTime" type="float" />
        </Properties>

        <State>
          <Scalar type="float" name="v" />
          <Scalar type="float" name="t" />
        </State>


        <InputPin name="__init__" messageTypeId="__init__">
          <OnReceive><![CDATA[
          deviceState->v=deviceProperties->v_init;
    deviceState->t=0.0;
          handler_log(1, "INIT v=%f v_init=%f", deviceState->v, deviceProperties->v_init);
          ]]>
          </OnReceive>
        </InputPin>

        <ReadyToSend><![CDATA[
        *readyToSend=0;
        // no checks - just fire
        *readyToSend |= OUTPUT_FLAG_fire;
        ]]></ReadyToSend>


        <OutputPin name="fire" messageTypeId="spike">
          <OnSend><![CDATA[
          float &t=deviceState->t;

          if (deviceState->t >= deviceProperties->endTime){
              handler_exit(0);
          }

          float &v = deviceState->v;

          //##INSERT_EQUATIONS_HERE##

          t += deviceProperties->dt;
          
          message->timestamp = t;
          if(deviceState->v >= deviceProperties->thr){ 
              message->fired = true;          
              deviceState->v=deviceProperties->rst;
              handler_log(1, "FIRE! t=%f", deviceState->t);
          } else {
              message->fired = false;
              handler_log(3, "Fire: t=%f, v=%f", deviceState->t, deviceState->v);
          }
          ]]></OnSend>
        </OutputPin>

        <InputPin name="input" messageTypeId="spike">
            <Properties>
                <Scalar type="float" name="weight" />
            </Properties>

          <OnReceive><![CDATA[
          if(message->fired){
              deviceState->v += edgeProperties->weight;
          }
          handler_log(3, "Spike recv, t_recv=%f, t_sent=%f, v=%f", deviceState->t, message->timestamp, deviceState->v);
          ]]></OnReceive>
        </InputPin>

      </DeviceType>
    </DeviceTypes>
  </GraphType>
</Graphs>
