<?xml version='1.0' encoding='ASCII'?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
  <GraphType id="snn_taylor">
    <SharedCode><![CDATA[
        //reinventing some wheels...

        float exp(float exponent)
        {   //4th order taylor series approximation
    	    float exp2 = exponent*exponent;
            float exp3 = exp2*exponent;
            float exp4 = exp3*exponent;
            return (1.0 + exponent + (exp2/2.0) + (exp3/6.0) + (exp4/24.0)); 
        }

        float fabs(float input)
        {   
            float f = input;
            int *v = (int *)(&f);
            *v = *v & 0x7FFFFFFF;
            
            return f;
        }
        ]]></SharedCode>
    <MessageTypes>
      <MessageType id="__init__"/>
      <MessageType id="tick"/>
      <MessageType id="spike">
        <Message>
          <Scalar name="fired" type="int8_t"/>
          <Scalar name="timestamp" type="float"/>
        </Message>
      </MessageType>
    </MessageTypes>
    <DeviceTypes>
      <DeviceType id="clock">
        <Properties>
          <Scalar name="neuronCount" type="uint32_t"/>
        </Properties>
        <State>
          <Scalar name="waitCount" type="uint32_t"/>
        </State>
        <InputPin name="__init__" messageTypeId="__init__">
          <OnReceive><![CDATA[
          deviceState->waitCount = deviceProperties->neuronCount;
          ]]></OnReceive>
        </InputPin>
        <InputPin name="tock" messageTypeId="tick">
          <OnReceive><![CDATA[
          assert(deviceState->waitCount > 0);
          deviceState->waitCount--;
          //handler_log(3,"tock : waitCount = %d\n", deviceState->waitCount);
          ]]></OnReceive>
        </InputPin>
        <OutputPin name="tick" messageTypeId="tick">
          <OnSend><![CDATA[
          //handler_log(3,"tick : waitCount = %d\n", deviceState->waitCount);
          assert(deviceState->waitCount==0);
          deviceState->waitCount=deviceProperties->neuronCount;
          ]]></OnSend>
        </OutputPin>
        <ReadyToSend><![CDATA[
        *readyToSend = deviceState->waitCount==0 ? OUTPUT_FLAG_tick : 0;
        ]]></ReadyToSend>
      </DeviceType>
      <DeviceType id="neuron">
        <Properties>
          <Scalar name="I" type="float"/>
          <Scalar name="tau" type="float"/>
          <Scalar name="thr" type="float"/>
          <Scalar name="rst" type="float"/>
          <Scalar name="dt" type="float"/>
          <Scalar name="v_init" type="float"/>
        </Properties>
        <State>
          <Scalar name="v" type="float"/>
          <Scalar name="t" type="float"/>
          <Scalar name="waitTick" type="int8_t"/>
          <Scalar name="sentSpike" type="int8_t"/>
        </State>
        <InputPin name="__init__" messageTypeId="__init__">
          <OnReceive><![CDATA[
          deviceState->v=deviceProperties->v_init;
	  deviceState->t=0.0;
          deviceState->waitTick=false;
          deviceState->sentSpike=true; //don't fire in round 1
          handler_log(1, "INIT v=%f v_init=%f, ABS_TEST=%f", deviceState->v, deviceProperties->v_init, fabs(0.2));

          
          ]]></OnReceive>
        </InputPin>
        <InputPin name="tick" messageTypeId="tick">
          <OnReceive><![CDATA[

          assert(deviceState->waitTick);
          assert(!deviceState->sentSpike);
          deviceState->waitTick=false;
	  ]]></OnReceive>
        </InputPin>
        <InputPin name="input" messageTypeId="spike">
          <Properties>
            <Scalar name="weight" type="float"/>
          </Properties>
          <OnReceive><![CDATA[
          if(message->fired){
              deviceState->v += edgeProperties->weight;
              handler_log(1, "Spike recv, t_recv=%f, t_sent=%f, v=%f", deviceState->t, message->timestamp, deviceState->v);
         }
          ]]></OnReceive>
        </InputPin>
        <OutputPin name="tock" messageTypeId="tick">
          <OnSend><![CDATA[
          assert(!deviceState->waitTick);
          float test = fabs(-1);
	  float _lio_1 = - deviceProperties->dt;
          
          float _exp_term = (_lio_1 / deviceProperties->tau);

          float v_expr = (deviceProperties->I + (deviceState->v * exp(_exp_term)) - (deviceProperties->I * exp(_exp_term)));
          deviceState->v = v_expr;

          handler_log(3, "Tock: t=%f, v=%f", deviceState->t, deviceState->v);
          deviceState->t += deviceProperties->dt;
          deviceState->sentSpike=false;
          deviceState->waitTick=true;

          ]]></OnSend>
        </OutputPin>
        <OutputPin name="fire" messageTypeId="spike">
          <OnSend><![CDATA[
          message->timestamp = deviceState->t;
          if(deviceState->v >= deviceProperties->thr){ 
              message->fired = true;          
              deviceState->v=deviceProperties->rst;
              handler_log(1, "FIRE! t=%f", deviceState->t);
          } else {
              message->fired = false;
              handler_log(3, "No fire, t=%f, v=%f", deviceState->t, deviceState->v);
         }

          assert(!deviceState->waitTick);
          assert(!deviceState->sentSpike);
          deviceState->sentSpike=true;
          ]]></OnSend>
        </OutputPin>
        <ReadyToSend><![CDATA[
        *readyToSend=0;
	if(!deviceState->waitTick && deviceState->sentSpike){
            *readyToSend |= OUTPUT_FLAG_tock;
        }else if(!deviceState->waitTick){
            *readyToSend |= OUTPUT_FLAG_fire;
        }
        ]]></ReadyToSend>
      </DeviceType>
    </DeviceTypes>
  </GraphType>
  <GraphInstance id="snn_taylor_twonode" graphTypeId="snn_taylor">
    <DeviceInstances sorted="1">
      <DevI id="clock" type="clock">
        <P>"neuronCount": 2</P>
      </DevI>
      <DevI id="n_0" type="neuron">
        <P>"I": 2.0, "tau": 10.0, "dt": 0.125, "rst": 0.0, "thr": 1.0</P>
      </DevI>
      <DevI id="n_1" type="neuron">
        <P>"I": 0.0, "tau": 100.0, "dt": 0.125, "rst": 0.0, "thr": 1.0</P>
      </DevI>
    </DeviceInstances>
    <EdgeInstances sorted="1">
      <EdgeI path="clock:tock-n_0:tock"/>
      <EdgeI path="clock:tock-n_1:tock"/>
      <EdgeI path="n_0:tick-clock:tick"/>
      <EdgeI path="n_1:input-n_0:fire">
        <P>"weight": 0.2</P>
      </EdgeI>
      <EdgeI path="n_1:tick-clock:tick"/>
    </EdgeInstances>
  </GraphInstance>
</Graphs>
